<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql存储过程</title>
      <link href="/2023/10/16/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/10/16/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql存储过程循环嵌套"><a href="#mysql存储过程循环嵌套" class="headerlink" title="mysql存储过程循环嵌套"></a>mysql存储过程循环嵌套</h1><pre><code>CREAT DEFINER=`root`@`%` PROCEDURE `name`(IN `PARM1` VARCHAR(300),OUT `OUTPUT` VARCHAR(300))  BEGIN      -- 定义一个变量，默认为0      DECLARE no_more_record INT DEFAULT 0;      -- 定义变量给游标获取数据      DECLARE p_id int(11);        -- 定义一个游标，并将指定数据存入到游标      DECLARE curl CURSOR FOR SELECT id from places where `level`=6 AND id&lt;&gt;1293;      -- 当游标没有数据时，设定变量为1      DECLARE CONTINUE HANDLER FOR NOT found SET no_more_record =1;  -- 打开游标  OPEN curl;  -- 获取游标的更新  FETCH curl INTO p_id;      -- 当变量不为1时，执行操作      WHILE no_more_record !=1 DO           BEGIN          -- 定义第二个变量给另一个游标获取数据（根据特定的情况来定义不同的变量）          DECLARE o_id int(11);          -- 定义一个游标，并将指定数据存入到游标          DECLARE curl2 CURSOR FOR select id from objects where id&gt;=1376 AND id&lt;=1381;          -- 当游标没有数据时，设定变量为1          DECLARE CONTINUE HANDLER FOR NOT found SET no_more_record2 =1;          -- 打开第二个游标          OPEN curl2;          -- 获取第二个游标的更新          FETCH curl2 INTO o_id;              -- 同上，当变量不为1时，往下执行操作              WHILE no_more_record2 !=1 DO                  -- 向关联表中插入数据，此时插入的数据为第一个游标获取的第一个数据，另，第二个游标获取的一批数据会一行一行的执行插入到目标表中，直至第二个游标没有数据时，结束，即while语句结束                  set @sql=&#39;INSERT INTO space_object(object_id,place_id,number,created_at,updated_at) VALUES(&#39;||o_id||&#39;,&#39;||&#39;p_id&#39;||&#39;,0,NOW(),NOW())&#39;;                  execute sql;                  -- 继续获取数据循环                  FETCH curl2 INTO o_id;              -- 当第二个游标的数据循环到最后没有数据时，变量no_more_record为1，停止循环              END WHILE;          -- 关闭游标2          CLOSE curl2;          END      -- 游标1获取更新并循环直至结束      FETCH curl INTO p_id;      END while ;  CLOSE curl;  END  </code></pre><h1 id="一、存储过程的创建和调用"><a href="#一、存储过程的创建和调用" class="headerlink" title="一、存储过程的创建和调用"></a>一、存储过程的创建和调用</h1><p>存储过程就是具有名字的一段代码，用来完成一个特定的功能。<br>创建的存储过程保存在数据库的数据字典中。  </p><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><pre><code>CREATE    [DEFINER = &#123; user | CURRENT_USER &#125;]　PROCEDURE sp_name ([proc_parameter[,...]])    [characteristic ...] routine_body proc_parameter:    [ IN | OUT | INOUT ] param_name type characteristic:    COMMENT &#39;string&#39;  | LANGUAGE SQL  | [NOT] DETERMINISTIC  | &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;  | SQL SECURITY &#123; DEFINER | INVOKER &#125; routine_body:　　Valid SQL routine statement [begin_label:] BEGIN　　[statement_list]　　　　……END [end_label]</code></pre><p><strong>MYSQL 存储过程中的关键语法</strong><br>声明语句结束符，可以自定义:  </p><pre><code>DELIMITER $$或DELIMITER //</code></pre><p>声明存储过程:</p><pre><code>CREATE PROCEDURE demo_in_parameter(IN p_in int)    </code></pre><p>存储过程开始和结束符号:  </p><pre><code>BEGIN .... END    </code></pre><p>变量赋值:  </p><pre><code>SET @p_in=1  </code></pre><p>变量定义:  </p><pre><code>DECLARE l_int int unsigned default 4000000; </code></pre><p>创建mysql存储过程、存储函数:  </p><pre><code>create procedure 存储过程名(参数)</code></pre><p>存储过程体:  </p><pre><code>create function 存储函数名(参数)</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>创建数据库，备份数据表用于示例操作：  </p><pre><code>mysql&gt; create database db1;mysql&gt; use db1;    mysql&gt; create table PLAYERS as select * from TENNIS.PLAYERS;mysql&gt; create table MATCHES  as select * from TENNIS.MATCHES;下面是存储过程的例子，删除给定球员参加的所有比赛：mysql&gt; delimiter $$　　#将语句的结束符号从分号;临时改为两个$$(可以是自定义)mysql&gt; CREATE PROCEDURE delete_matches(IN p_playerno INTEGER)    -&gt; BEGIN    -&gt; 　　DELETE FROM MATCHES    -&gt;    WHERE playerno = p_playerno;    -&gt; END$$Query OK, 0 rows affected (0.01 sec) mysql&gt; delimiter;　　#将语句的结束符号恢复为分号</code></pre><p><strong>解析</strong>：默认情况下，存储过程和默认数据库相关联，如果想指定存储过程创建在某个特定的数据库下，那么在过程名前面加数据库名做前缀。 在定义过程时，使用 <strong>DELIMITER $$</strong> 命令将语句的结束符号从分号 ; 临时改为两个 $$，使得过程体中使用的分号被直接传递到服务器，而不会被客户端（如mysql）解释。<br>调用存储过程：  </p><pre><code>call sp_name[(传参)];</code></pre><pre><code>mysql&gt; select * from MATCHES;+---------+--------+----------+-----+------+| MATCHNO | TEAMNO | PLAYERNO | WON | LOST |+---------+--------+----------+-----+------+|       1 |      1 |        6 |   3 |    1 ||       7 |      1 |       57 |   3 |    0 ||       8 |      1 |        8 |   0 |    3 ||       9 |      2 |       27 |   3 |    2 ||      11 |      2 |      112 |   2 |    3 |+---------+--------+----------+-----+------+5 rows in set (0.00 sec) mysql&gt; call delete_matches(57);Query OK, 1 row affected (0.03 sec) mysql&gt; select * from MATCHES;+---------+--------+----------+-----+------+| MATCHNO | TEAMNO | PLAYERNO | WON | LOST |+---------+--------+----------+-----+------+|       1 |      1 |        6 |   3 |    1 ||       8 |      1 |        8 |   0 |    3 ||       9 |      2 |       27 |   3 |    2 ||      11 |      2 |      112 |   2 |    3 |+---------+--------+----------+-----+------+4 rows in set (0.00 sec)</code></pre><p>解析：在存储过程中设置了需要传参的变量p_playerno，调用存储过程的时候，通过传参将57赋值给p_playerno，然后进行存储过程里的SQL操作。<br><strong>存储过程体</strong><br>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等<br>过程体格式：以begin开始，以end结束(可嵌套)  </p><pre><code>BEGIN　　BEGIN　　　　BEGIN　　　　　　statements; 　　　　END　　ENDEND</code></pre><p>注意：每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。<br>为语句块贴标签:  </p><pre><code>[begin_label:] BEGIN　　[statement_list]END [end_label]</code></pre><p>例如：  </p><pre><code>label1: BEGIN　　label2: BEGIN　　　　label3: BEGIN　　　　　　statements; 　　　　END label3 ;　　END label2;END label1</code></pre><p>标签有两个作用：<br>1、增强代码的可读性<br>2、在某些语句(例如:leave和iterate语句)，需要用到标签  </p><h1 id="二、存储过程的参数"><a href="#二、存储过程的参数" class="headerlink" title="二、存储过程的参数"></a>二、存储过程的参数</h1><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：  </p><pre><code>CREATEPROCEDURE 存储过程名([[IN |OUT |INOUT ] 参数名 数据类形...])</code></pre><p>IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）<br>OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）<br>INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）  </p><h2 id="1、in-输入参数"><a href="#1、in-输入参数" class="headerlink" title="1、in 输入参数"></a>1、in 输入参数</h2><pre><code>mysql&gt; delimiter $$mysql&gt; create procedure in_param(in p_in int)    -&gt; begin    -&gt; 　　select p_in;    -&gt; 　　set p_in=2;    -&gt;    select P_in;    -&gt; end$$mysql&gt; delimiter ; mysql&gt; set @p_in=1; mysql&gt; call in_param(@p_in);+------+| p_in |+------+|    1 |+------+ +------+| P_in |+------+|    2 |+------+ mysql&gt; select @p_in;+-------+| @p_in |+-------+|     1 |+-------+</code></pre><p>以上可以看出，p_in 在存储过程中被修改，但并不影响 @p_in 的值，因为前者为局部变量、后者为全局变量。  </p><h2 id="2、out输出参数"><a href="#2、out输出参数" class="headerlink" title="2、out输出参数"></a>2、out输出参数</h2><pre><code>mysql&gt; delimiter //mysql&gt; create procedure out_param(out p_out int)    -&gt;   begin    -&gt;     select p_out;    -&gt;     set p_out=2;    -&gt;     select p_out;    -&gt;   end    -&gt; //mysql&gt; delimiter ; mysql&gt; set @p_out=1; mysql&gt; call out_param(@p_out);+-------+| p_out |+-------+|  NULL |+-------+　　#因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null+-------+| p_out |+-------+|     2 |+-------+ mysql&gt; select @p_out;+--------+| @p_out |+--------+|      2 |+--------+　　#调用了out_param存储过程，输出参数，改变了p_out变量的值</code></pre><h2 id="3、inout输入参数"><a href="#3、inout输入参数" class="headerlink" title="3、inout输入参数"></a>3、inout输入参数</h2><pre><code>mysql&gt; delimiter $$mysql&gt; create procedure inout_param(inout p_inout int)    -&gt;   begin    -&gt;     select p_inout;    -&gt;     set p_inout=2;    -&gt;     select p_inout;    -&gt;   end    -&gt; $$mysql&gt; delimiter ; mysql&gt; set @p_inout=1; mysql&gt; call inout_param(@p_inout);+---------+| p_inout |+---------+|       1 |+---------+ +---------+| p_inout |+---------+|       2 |+---------+ mysql&gt; select @p_inout;+----------+| @p_inout |+----------+|        2 |+----------+#调用了inout_param存储过程，接受了输入的参数，也输出参数，改变了变量</code></pre><p>注意：<br>1、如果过程没有参数，也必须在过程名后面写上小括号例：</p><pre><code>CREATE PROCEDURE sp_name ([proc_parameter[,...]]) ……</code></pre><p>2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理<br>建议：  </p><ul><li>输入值使用in参数。</li><li>返回值使用out参数。  </li><li>inout参数就尽量的少用。</li></ul><h1 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h1><h2 id="1-变量定义"><a href="#1-变量定义" class="headerlink" title="1. 变量定义"></a>1. 变量定义</h2><p>局部变量声明一定要放在存储过程体的开始：</p><pre><code>DECLAREvariable_name [,variable_name...] datatype [DEFAULT value];</code></pre><p>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)<br>例如:</p><pre><code>DECLARE l_int int unsigned default 4000000;  DECLARE l_numeric number(8,2) DEFAULT 9.95;  DECLARE l_date date DEFAULT &#39;1999-12-31&#39;;  DECLARE l_datetime datetime DEFAULT &#39;1999-12-31 23:59:59&#39;;  DECLARE l_varchar varchar(255) DEFAULT &#39;This will not be padded&#39;;</code></pre><h2 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2. 变量赋值"></a>2. 变量赋值</h2><pre><code>SET 变量名 = 表达式值 [,variable_name = expression ...]</code></pre><h2 id="3-用户变量"><a href="#3-用户变量" class="headerlink" title="3. 用户变量"></a>3. 用户变量</h2><p>在MySQL客户端使用用户变量:</p><pre><code>mysql &gt; SELECT &#39;Hello World&#39; into @x;  mysql &gt; SELECT @x;  +-------------+  |   @x        |  +-------------+  | Hello World |  +-------------+  mysql &gt; SET @y=&#39;Goodbye Cruel World&#39;;  mysql &gt; SELECT @y;  +---------------------+  |     @y              |  +---------------------+  | Goodbye Cruel World |  +---------------------+   mysql &gt; SET @z=1+2+3;  mysql &gt; SELECT @z;  +------+  | @z   |  +------+  |  6   |  +------+</code></pre><p><strong>在存储过程中使用用户变量</strong></p><pre><code>mysql &gt; CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,&#39; World&#39;);  mysql &gt; SET @greeting=&#39;Hello&#39;;  mysql &gt; CALL GreetWorld( );  +----------------------------+  | CONCAT(@greeting,&#39; World&#39;) |  +----------------------------+  |  Hello World               |  +----------------------------+</code></pre><p><strong>在存储过程间传递全局范围的用户变量</strong></p><pre><code>mysql&gt; CREATE PROCEDURE p1()   SET @last_procedure=&#39;p1&#39;;  mysql&gt; CREATE PROCEDURE p2() SELECT CONCAT(&#39;Last procedure was &#39;,@last_procedure);  mysql&gt; CALL p1( );  mysql&gt; CALL p2( );  +-----------------------------------------------+  | CONCAT(&#39;Last procedure was &#39;,@last_proc       |  +-----------------------------------------------+  | Last procedure was p1                         |   +-----------------------------------------------+</code></pre><p><strong>注意:</strong>  </p><ol><li>用户变量名一般以@开头</li><li>滥用用户变量会导致程序难以理解及管理</li></ol><h1 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a>四、注释</h1><p>MySQL 存储过程可使用两种风格的注释<br>两个横杆–：该风格一般用于单行注释。<br>c 风格： 一般用于多行注释。<br>例如：</p><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc1 --name存储过程名       -&gt; (IN parameter1 INTEGER)        -&gt; BEGIN        -&gt; DECLARE variable1 CHAR(10);        -&gt; IF parameter1 = 17 THEN        -&gt; SET variable1 = &#39;birds&#39;;        -&gt; ELSE      -&gt; SET variable1 = &#39;beasts&#39;;       -&gt; END IF;       -&gt; INSERT INTO table1 VALUES (variable1);      -&gt; END       -&gt; //  mysql &gt; DELIMITER ;</code></pre><h2 id="MySQL存储过程的调用"><a href="#MySQL存储过程的调用" class="headerlink" title="MySQL存储过程的调用"></a>MySQL存储过程的调用</h2><p>用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。具体的调用方法可以参看上面的例子。</p><h2 id="MySQL存储过程的查询"><a href="#MySQL存储过程的查询" class="headerlink" title="MySQL存储过程的查询"></a>MySQL存储过程的查询</h2><p>我们像知道一个数据库下面有那些表，我们一般采用 showtables; 进行查看。那么我们要查看某个数据库下面的存储过程，是否也可以采用呢？答案是，我们可以查看某个数据库下面的存储过程，但是是另一钟方式。</p><p>我们可以用以下语句进行查询：</p><pre><code>selectname from mysql.proc where db=&#39;数据库名&#39;;或者selectroutine_name from information_schema.routines where routine_schema=&#39;数据库名&#39;;或者showprocedure status where db=&#39;数据库名&#39;;</code></pre><p><strong>如果我们想知道，某个存储过程的详细，那我们又该怎么做呢？是不是也可以像操作表一样用describe 表名进行查看呢？</strong></p><p><strong>答案是</strong>：我们可以查看存储过程的详细，但是需要用另一种方法：</p><pre><code>SHOW CREATE PROCEDURE 数据库.存储过程名;</code></pre><p>就可以查看当前存储过程的详细。</p><h2 id="MySQL存储过程的修改"><a href="#MySQL存储过程的修改" class="headerlink" title="MySQL存储过程的修改"></a>MySQL存储过程的修改</h2><pre><code>ALTER PROCEDURE</code></pre><p>更改用 CREATE PROCEDURE 建立的预先指定的存储过程，其不会影响相关存储过程或存储功能。</p><h2 id="MySQL存储过程的删除"><a href="#MySQL存储过程的删除" class="headerlink" title="MySQL存储过程的删除"></a>MySQL存储过程的删除</h2><p>删除一个存储过程比较简单，和删除表一样：</p><pre><code>DROPPROCEDURE</code></pre><p>从 MySQL 的表格中删除一个或多个存储过程。</p><h2 id="MySQL存储过程的控制语句"><a href="#MySQL存储过程的控制语句" class="headerlink" title="MySQL存储过程的控制语句"></a>MySQL存储过程的控制语句</h2><p><strong>(1). 变量作用域</strong></p><p>内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc3()       -&gt; begin      -&gt; declare x1 varchar(5) default &#39;outer&#39;;       -&gt; begin      -&gt; declare x1 varchar(5) default &#39;inner&#39;;        -&gt; select x1;        -&gt; end;         -&gt; select x1;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><p><strong>(2). 条件语句</strong></p><ol><li>if-then-else 语句</li></ol><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc2(IN parameter int)       -&gt; begin      -&gt; declare var int;       -&gt; set var=parameter+1;       -&gt; if var=0 then      -&gt; insert into t values(17);       -&gt; end if;       -&gt; if parameter=0 then      -&gt; update t set s1=s1+1;       -&gt; else      -&gt; update t set s1=s1+2;       -&gt; end if;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><ol start="2"><li>case语句：</li></ol><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc3 (in parameter int)       -&gt; begin      -&gt; declare var int;       -&gt; set var=parameter+1;       -&gt; case var       -&gt; when 0 then        -&gt; insert into t values(17);       -&gt; when 1 then        -&gt; insert into t values(18);       -&gt; else        -&gt; insert into t values(19);       -&gt; end case;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ; case    when var=0 then        insert into t values(30);    when var&gt;0 then    when var&lt;0 then    elseend case</code></pre><p><strong>(3). 循环语句</strong></p><ol><li>while ···· end while</li></ol><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc4()       -&gt; begin      -&gt; declare var int;       -&gt; set var=0;       -&gt; while var&lt;6 do       -&gt; insert into t values(var);       -&gt; set var=var+1;       -&gt; end while;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;while 条件 do    --循环体endwhile</code></pre><ol start="2"><li>repeat···· end repeat<br>它在执行操作后检查结果，而 while 则是执行前进行检查。</li></ol><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc5 ()       -&gt; begin        -&gt; declare v int;       -&gt; set v=0;       -&gt; repeat       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; until v&gt;=5       -&gt; end repeat;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;repeat    --循环体until 循环条件  end repeat;</code></pre><ol start="3"><li>loop ·····endloop<br>loop 循环不需要初始条件，这点和 while 循环相似，同时和 repeat 循环一样不需要结束条件, leave 语句的意义是离开循环。</li></ol><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc6 ()       -&gt; begin      -&gt; declare v int;       -&gt; set v=0;       -&gt; LOOP_LABLE:loop       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; if v &gt;=5 then      -&gt; leave LOOP_LABLE;       -&gt; end if;       -&gt; end loop;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre><ol start="4"><li>LABLES 标号：<br>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</li></ol><p><strong>(4). ITERATE迭代</strong></p><p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:</p><pre><code>mysql &gt; DELIMITER //  mysql &gt; CREATE PROCEDURE proc10 ()       -&gt; begin      -&gt; declare v int;       -&gt; set v=0;       -&gt; LOOP_LABLE:loop       -&gt; if v=3 then        -&gt; set v=v+1;       -&gt; ITERATE LOOP_LABLE;       -&gt; end if;       -&gt; insert into t values(v);       -&gt; set v=v+1;       -&gt; if v&gt;=5 then      -&gt; leave LOOP_LABLE;       -&gt; end if;       -&gt; end loop;       -&gt; end;       -&gt; //  mysql &gt; DELIMITER ;</code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装mysql</title>
      <link href="/2022/07/22/docker%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/07/22/docker%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><p>MySQL 是世界上最受欢迎的开源数据库。凭借其可靠性、易用性和性能，MySQL 已成为 Web 应用程序的数据库优先选择。</p><h3 id="1、查看可用的-MySQL-版本"><a href="#1、查看可用的-MySQL-版本" class="headerlink" title="1、查看可用的 MySQL 版本"></a>1、查看可用的 MySQL 版本</h3><p>访问 MySQL 镜像库地址：<a href="https://hub.docker.com/_/mysql?tab=tags">https://hub.docker.com/_/mysql?tab=tags</a> 。</p><p>此外，我们还可以用 docker search mysql 命令来查看可用版本：</p><pre><code>docker search mysqlNAME                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDmysql                    MySQL is a widely used, open-source relati...   2529      [OK]       mysql/mysql-server       Optimized MySQL Server Docker images. Crea...   161                  [OK]centurylink/mysql        Image containing mysql. Optimized to be li...   45                   [OK]sameersbn/mysql                                                          36                   [OK]google/mysql             MySQL server for Google Compute Engine          16                   [OK]appcontainers/mysql      Centos/Debian Based Customizable MySQL Con...   8                    [OK]marvambass/mysql         MySQL Server based on Ubuntu 14.04              6                    [OK]drupaldocker/mysql       MySQL for Drupal                                2                    [OK]azukiapp/mysql           Docker image to run MySQL by Azuki - http:...   2                    [OK]...</code></pre><h3 id="2、拉取-MySQL-镜像"><a href="#2、拉取-MySQL-镜像" class="headerlink" title="2、拉取 MySQL 镜像"></a>2、拉取 MySQL 镜像</h3><p>这里我们拉取官方的最新版本的镜像：</p><pre><code>docker pull mysql:latest</code></pre><h3 id="3、查看本地镜像"><a href="#3、查看本地镜像" class="headerlink" title="3、查看本地镜像"></a>3、查看本地镜像</h3><p>使用以下命令来查看是否已安装了 mysql：</p><pre><code>docker images</code></pre><p>在上图中可以看到我们已经安装了最新版本（latest）的 mysql 镜像。</p><h3 id="4、运行容器"><a href="#4、运行容器" class="headerlink" title="4、运行容器"></a>4、运行容器</h3><p>安装完成后，我们可以使用以下命令来运行 mysql 容器：</p><pre><code>docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><p>参数说明：</p><p>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。<br>MYSQL_ROOT_PASSWORD&#x3D;123456：设置 MySQL 服务 root 用户的密码。</p><h3 id="5、安装成功"><a href="#5、安装成功" class="headerlink" title="5、安装成功"></a>5、安装成功</h3><p>通过 docker ps 命令查看是否安装成功：</p><p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm浏览器代理设置</title>
      <link href="/2022/07/22/npm%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/07/22/npm%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>设置npm 浏览器代理</p><pre><code>npm config set proxy=http:</code></pre><p>取消npm 浏览器代理</p><pre><code>npm config delete proxy</code></pre><p>npm设置淘宝镜像 npm </p><pre><code>config set registry=https://registry.npm.taobao.org</code></pre><p>npm取消淘宝镜像</p><pre><code>npm config delete registry</code></pre><p>查看代理信息（当前配置） </p><pre><code>npm config list</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站介绍</title>
      <link href="/2022/07/16/hello-world/"/>
      <url>/2022/07/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>我会在这个网站放入我的编程博客，编程教学，以及我个人资料，供大家学习浏览。在浏览过程中遇到问题，或者想学习的知识，可以通过发送邮件到我的个人邮箱 <a href="mailto:&#122;&#104;&#x61;&#x6e;&#x67;&#x78;&#x69;&#x6e;&#104;&#101;&#x72;&#111;&#64;&#111;&#117;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#99;&#111;&#x6d;">&#122;&#104;&#x61;&#x6e;&#x67;&#x78;&#x69;&#x6e;&#104;&#101;&#x72;&#111;&#64;&#111;&#117;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#99;&#111;&#x6d;</a> 进行探讨。我的所有教学代码都可以通过访问github下载查看，欢迎大家Start，各种项目代码连接将会在以后跟新。<br>I will put my programming blog, programming teaching and my personal information on this website for everyone to learn and browse. If you encounter problems during browsing or want to learn knowledge, you can send an email to my personal email <a href="mailto:&#122;&#104;&#97;&#110;&#103;&#120;&#105;&#110;&#104;&#101;&#114;&#111;&#64;&#x6f;&#x75;&#x74;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#x63;&#x6f;&#x6d;">&#122;&#104;&#97;&#110;&#103;&#120;&#105;&#110;&#104;&#101;&#114;&#111;&#64;&#x6f;&#x75;&#x74;&#x6c;&#111;&#x6f;&#x6b;&#x2e;&#x63;&#x6f;&#x6d;</a> Discuss. All my teaching codes can be downloaded and viewed by visiting GitHub. Welcome to start. All project code connections will be updated in the future.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
